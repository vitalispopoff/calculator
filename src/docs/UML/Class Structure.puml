@startuml

+interface Nodeable{
    ..
        +   {method} Nodeable takeFromQueue ()
        +   {method} Nodeable getLeft ()
        +   {method} Nodeable getRite ()
        +   {method} Nodeable getRoot ()
        +   {method} void addToQueue (Nodeable)
        +   {method} void setLeft (Nodeable)
        +   {method} void setRite (Nodeable)
        +   {method} void setRoot (Nodeable)
}

+class Node implements Nodeable{
        ~   {field} {static} Nodeable mainQueue
        ~   {field} {static} Nodeable cache ?
        ~   {field} {static} int[] priorityIndex
        ~   {field} Nodeable left
        ~   {field} Nodeable getRite
        ~   {field} Nodeable root
        ~   {field} Double value
        ~   {field} Priority priorityType
    --
        ~   {method} void addToPriorityIndex (Nodeable)
        ~   {method} void takeFromPriorityIndex (Nodeable)
        ~   {method} int getPriorityIndex ()
        ~   {method} void setValue (Double)
        ~   {method} Double getValue ()
    .. @Overrides..
}

+interface Parseable{
    ..
        +   {method} {static} void addToValueCache (char)
        +   {method} {static} double dumpValueCache()
}

+class Parser implements Parseable{
        ~    {field} {static} boolean isValueNegative
        -   {field} {static} ArrayList<Character> parserCache
    --
        +   {method} {static} void addToParserCache (char)
        +   {method} {static} dumpParserCache ()
        +   {method} {static} boolean isParserAValue ()
        +   {method} {static} void resetParser ()
        ~   {method} {static} String getParserCache ()
}

enum Priority{
        EXPONENT,
        ROOT,
        MULTIPLY,
        DIVIDE,
        ADD,
        SUBTRACT,
        EVALUATE,
        VALUE
    ..
}

Node --|> Priority

@enduml