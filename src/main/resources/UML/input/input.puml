@startuml
package input {

    +interface Queueable{
        ..default..
            ~{method} void revoke()
        ..abstract..
            ~{method} Queueable summon()
        ..
            +{method} Queueable getTail ()
            +{method} Queueable getHead ()
            +{method} void setTail ()
            +{method} void setHead ()
        }

    ~abstract class QueueCore{
            ~{field} Queueable head
            ~{field} Queueable tail
        --
            +{method} Queueable summon ()
            +{method} Queueable getTail ()
            +{method} Queueable getHead()
            +{method} void revoke ()
            +{method} void setTail (Queueable)
            +{method} void setHead (Queueable)
    }

    ~interface Queuing{
        ..static..
            ~{method} void extendQueue (Queuing, Enqueued)
            ~{method} Queueable reduceQueue (Queueable)
        ..
            ~{method} void updateCounters(Queueable)
            ~{method} void updateCounters()
    }

    ~class NodeQueue{
            ~{field} int[] priorityCounter
            ~{field} int counter
        ..@Override..
            ~{method} : /.../
    }

    +interface Enqueued {
        ..default..
            +{method} Queueable wrap (Nodeable)
            +{method} Nodeable unWrap ()
        ..
            +{method} Typical getType ()
            +{method} Nodeable getNode ()
            +{method} void setNode (Nodeable)
            +{method} void setType (Typical)
    }

    ~class Queuer{
            ~{field} Typical getType
            ~{field} Nodeable node
        --
            ~{method} int getTypeOrdinal ()
            ~{method} void setTypeOrdinal ()
            ~{method} void setType (Nodeable)
        ..@Override..
            +{method} : /.../
    }

    Enqueued    -|>     Queueable   :   ext
    Queueable   <|-     Queuing     :   ext

    QueueCore   <|-     NodeQueue   :   ext
    Queuer      -|>     QueueCore   :   ext

    Enqueued    <|--    Queuer      :   impl
    Queuing     <|--    NodeQueue   :   impl
}
@enduml